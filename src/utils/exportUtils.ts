import { TFile } from 'obsidian';
import { NoteData } from '../types';
import { SortUtils } from './sortUtils';

export class ExportUtils {
	/**
	 * Ensure export folder exists
	 */
	static async ensureExportFolderExists(app: any, exportFolderPath: string): Promise<void> {
		const folder = app.vault.getAbstractFileByPath(exportFolderPath);
		
		if (!folder) {
			await app.vault.createFolder(exportFolderPath);
		}
	}

	/**
	 * Export a single tag to a note
	 */
	static async exportTagToNote(
		app: any,
		tag: string,
		notes: NoteData[],
		exportFolderPath: string,
		sortOrder: string,
		customOrder: Record<string, string[]>
	): Promise<boolean> {
		if (notes.length === 0) {
			return false;
		}

		const sortedNotes = await SortUtils.sortNotes([...notes], tag, sortOrder, customOrder);
		const exportFileName = `tag-${this.sanitizeFileName(tag)}.md`;
		const exportPath = `${exportFolderPath}/${exportFileName}`;

		// Generate markdown content
		const content = this.generateTagNoteContent(tag, sortedNotes, sortOrder, customOrder);

		// Check if file already exists
		const existingFile = app.vault.getAbstractFileByPath(exportPath);
		
		if (existingFile instanceof TFile) {
			// Update existing file
			await app.vault.modify(existingFile, content);
		} else {
			// Create new file
			await app.vault.create(exportPath, content);
		}

		return true;
	}

	/**
	 * Generate markdown content for tag note
	 */
	static generateTagNoteContent(
		tag: string, 
		notes: NoteData[], 
		sortOrder: string, 
		customOrder: Record<string, string[]>
	): string {
		const currentDate = new Date().toISOString().split('T')[0];
		const sortOrderText = SortUtils.getSortOrderDescription(tag, sortOrder, customOrder);
		
		let content = `---\n`;
		content += `tag: ${tag}\n`;
		content += `generated: ${new Date().toISOString()}\n`;
		content += `total_notes: ${notes.length}\n`;
		content += `sort_order: ${sortOrder}\n`;
		content += `---\n\n`;
		
		content += `# Tag Navigator: #${tag}\n\n`;
		content += `Generated on: ${currentDate}\n`;
		content += `Sort Order: ${sortOrderText}\n`;
		content += `Total Notes: ${notes.length}\n\n`;
		
		content += `## Notes List\n\n`;
		
		for (let i = 0; i < notes.length; i++) {
			const note = notes[i];
			const noteTitle = note.title;
			content += `${i + 1}. [[${noteTitle}]]\n`;
		}
		
		content += `\n---\n`;
		content += `*This note was automatically generated by Tag Navigator plugin*\n`;
		
		return content;
	}

	/**
	 * Sanitize file name for export
	 */
	static sanitizeFileName(tag: string): string {
		// Remove invalid characters for file names
		return tag.replace(/[<>:"/\\|?*]/g, '-').replace(/\s+/g, '-');
	}
} 